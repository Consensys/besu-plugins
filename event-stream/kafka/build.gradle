/*
 * Copyright ConsenSys AG.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

plugins {
  // Apply the java plugin to add support for Java
  id 'java-library'
}

sourceSets {
  test {
    resources {
      sourceSets.test.resources.srcDir "../common/src/test/resources"
    }
  }
}

dependencies {
  api project(':event-stream:common')
  api 'org.apache.kafka:kafka-clients'

  implementation 'com.google.auto.service:auto-service'
  implementation 'info.picocli:picocli'
  implementation 'org.apache.logging.log4j:log4j-api'
  implementation 'org.apache.logging.log4j:log4j-slf4j-impl'
  implementation 'org.hyperledger.besu:plugin-api'

  runtimeOnly 'org.apache.logging.log4j:log4j-core'

  annotationProcessor 'com.google.auto.service:auto-service'

  testImplementation 'org.assertj:assertj-core'
  testImplementation 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation 'org.junit.jupiter:junit-jupiter-api'
  testImplementation 'org.mockito:mockito-core'
  testImplementation 'org.mockito:mockito-junit-jupiter'
  testImplementation 'org.junit.platform:junit-platform-runner'

  testImplementation 'junit:junit'

  errorprone("com.google.errorprone:error_prone_core")
}

//create a single Jar with all dependencies
jar {
  //dependsOn checkLicenses
  archiveBaseName = project.name + '-plugin'
  manifest {
    attributes(
      'Specification-Title': archiveBaseName.get(),
      'Specification-Version': rootProject.version,
      'Implementation-Title': archiveBaseName.get(),
      'Implementation-Version': calculateVersion()
      )
  }
  from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
  exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}
